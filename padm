#!/usr/bin/env python

import sys, json

from Helper import Helper
from Config import Config
from dists.RouterDist import RouterDist

# installs = {
# 	'apache2 | nginx',
# 	'php | python | ruby',
# 	'relational db (mysql | postgre)',
# 	'nosql db (redis | mongo)',
# 	'sphinx | elastic',
# 	'git | svn',
#	'dependencies managers - composer, pear(for php)',
#	'build makers like gulp, Grunt',
# 	'framework',
#	'editors'
# }

# args = {
# 	'install',
# 	'update',
#	'configure',
#   'delete'
# }
#
# curl -i https://api.github.com/users/sephirothus - rate limit

try:
	options = {
		'-a': 'install', # action
		'-d': '1', # with dependencies
		'-c': '1' # with configuration
	}

	for arg in sys.argv:
		arg = arg.split('=')
		if (arg[0] in options): options[arg[0]] = arg[1] if len(arg) == 2 else options[arg[0]]

	confClass = Config(options['-d'])
	action = options['-a']
	helper = Helper()
	conf = {}
	confFileName = 'my_config.json'
	packagesFileName = 'dist_packages.json'

	conf = helper.getJsonData(confFileName)
	if conf:
		queue = confClass.createQueue(conf)
	else:
		queue = confClass.createQueue(confClass.createConf())
	
	question = ["We will " + action + ":"]
	count = 1
	for el in queue:
		version = ' ' + el.attrs['version'] + ' version' if hasattr(el, 'attrs') and 'version' in el.attrs else ''
		question.append(str(count) + '. ' + el.name + version)
		count += 1
	
	helper.createBlock(question)

	if helper.question('is it ok?'):
		router = RouterDist()
		dist = router.getDist(conf)
		distName = dist.__class__.__name__
		allPackages = helper.getJsonData(packagesFileName)
		for el in queue:
			curClassName = el.__class__.__name__.lower()
			# if there is packages for current class, we set it
			if curClassName in allPackages:
				el.packages = allPackages[curClassName]
			# set current distribution as an object attribute
			el.currentDist = dist
			helper.createBlock(helper.ucfirst(action) + ' ' + el.name)
			if not hasattr(el, 'attrs'): el.attrs = {}
			# checking package
			try:
				check = getattr(el, helper.getMethod('check', el))()
				# TODO: check if current dist or it's release supports this instance
				# and if current dist, but not current release supports, ask to install closest instance release
			except Exception as e:
				print str(e)
				continue
			# get action method name
			method = helper.getMethod(action, el)
			if not method:
				print "There's no action " + action
				continue

			if action == 'install':
				if check: print el.name + " already installed"
				else: getattr(el, method)()
			else:
				if check: getattr(el, method)()
				else: print el.name + " is not installed"

			if action in ['install', 'update'] and options['-c'] == '1':
				# configuring
				configure = helper.getMethod('configure', el)
				if configure:
					print "======= Configuring ======="
					getattr(el, configure)()

		helper.createBlock("All completed. Thanx for using pAdm:)")
	else:
		helper.createBlock("As you wish. Thanx for using pAdm:)")
	
# except Exception as e:
# 	print "ERROR: " + str(e)
except KeyboardInterrupt:
	print "\nBye:)"
	